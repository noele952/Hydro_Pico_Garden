AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  HydroPicoThingName:
    Type: String
    Description: "Enter a name for your IoT Thing"

  HydroPicoPolicyName:
    Type: String
    Description: "Enter a name for your IoT Policy"

  HydroPicoBucketName:
    Type: String
    Description: "Enter a bucket name for HydroPico data"

  HydroPicoMQTTDataLambdaFunctionName:
    Type: String
    Description: "Enter a name for your Lambda function"
    Default: "HydroPicoMQTTDataLambdaFunction"

  HydroPicoMQTTImageStorageLambdaFunctionName:
    Type: String
    Description: "Enter a name for your Lambda function"
    Default: "HydroPicoMQTTImageStorageLambdaFunction"

  HydroPicoImageAssemblyLambdaFunctionName:
    Type: String
    Description: "Enter a name for your Lambda function"
    Default: "HydroPicoImageAssemblyLambdaFunction"

Resources:
  HydroPicoIoTThing:
    Type: "AWS::IoT::Thing"
    Properties:
      ThingName: !Ref HydroPicoThingName

  HydroPicoIoTPolicy:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyName: !Ref HydroPicoPolicyName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "iot:Connect"
              - "iot:Publish"
              - "iot:Subscribe"
              - "iot:Receive"
            Resource: "*"

  MHydroPicoIoTThingPolicyAttachment:
    Type: "AWS::IoT::PolicyPrincipalAttachment"
    Properties:
      PolicyName: !Ref HydroPicoIoTPolicy
      Principal: !GetAtt HydroPicoIoTThing.Arn

  HydroPicoMQTTDataLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "HydroPicoMQTTDataLambdaFunctionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:CreateTable"
                  - "dynamodb:PutItem"
                  - "dynamodb:ListTables"
                Resource: "*"

  HydroPicoMQTTDataLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref HydroPicoMQTTDataLambdaFunctionName
      Handler: "index.lambda_handler"
      Role: !GetAtt HydroPicoMQTTDataLambdaFunctionRole.Arn
      Runtime: "python3.10"
      Code:
        S3Bucket: "hydropico-assets"
        S3Key: "lambda_mqtt_collect_data.zip"

  HydroPicoMQTTImageStorageLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "HydroPicoMQTTImageStorageLambdaFunctionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:CreateTable"
                  - "dynamodb:PutItem"
                  - "dynamodb:ListTables"
                  - "lambda:InvokeFunction"
                Resource: "*"

  HydroPicoMQTTImageStorageLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref HydroPicoMQTTImageStorageLambdaFunctionName
      Handler: "index.lambda_handler"
      Role: !GetAtt HydroPicoMQTTImageStorageLambdaFunctionRole.Arn
      Runtime: "python3.10"
      Environment:
        Variables:
          REASSEMBLY_FUNCTION_ARN: !GetAtt HydroPicoImageAssemblyLambdaFunctionRole.Arn
      Code:
        S3Bucket: "hydropico-assets"
        S3Key: "lambda_mqtt_store_pic.zip"

  HydroPicoImageAssemblyLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "HydroPicoImageAssemblyLambdaFunctionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:DeleteItem"
                  - "s3:PutObject"
                Resource: "*"

  HydroPicoImageAssemblyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref HydroPicoImageAssemblyLambdaFunctionName
      Handler: "index.lambda_handler"
      Role: !GetAtt HydroPicoImageAssemblyLambdaFunctionRole.Arn
      Runtime: "python3.8"
      Environment:
        Variables:
          BUCKET_NAME: !Ref HydroPicoBucketName
      Code:
        S3Bucket: "hydropico-assets"
        S3Key: "lambda_mqtt_assemble_pic.zip"

  CopyAssetsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CopyAssetsLambdaExecutionRole.Arn
      FunctionName: CopyAssetsLambdaFunction
      Runtime: python3.10
      Code:
        S3Bucket: "hydropico-assets"
        S3Key: "lambda_copy_assets_to_bucket.zip"
      Environment:
        Variables:
          DestinationBucketName: !Ref HydroPicoBucketName
          Folder: "static/"

  CopyAssetsLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CopyAssetsLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt CopyAssetsLambdaFunction.Arn
      Principal: "s3.amazonaws.com"
      SourceArn: !Sub arn:aws:s3:::${HydroPicoBucketName}

  HydroPicoBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref HydroPicoBucketName

  HydroPicoBucketStaticPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref HydroPicoBucketName
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref HydroPicoBucketName
                    - /static/* # Adjust the path as needed
            Principal: "*"

  HydroPicoBucketImagesPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref HydroPicoBucketName
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref HydroPicoBucketName
                    - /images/* # Adjust the path as needed
            Principal: "*"
